---
- name: Deploy to Kubernetes (Locally using minikube)
  hosts: localhost
  gather_facts: true  # Enable fact gathering to ensure system compatibility
  tasks:

    # Task 1: Check the system's OS and decide on the package manager
    - name: Gather system facts
      ansible.builtin.setup:

    # Task 2: Ensure Python is installed (Ansible requires Python)
    - name: Check if Python is installed
      command: which python3
      register: python_installed
      failed_when: python_installed.rc != 0
      changed_when: false
      ignore_errors: yes

    - name: Install Python if not found
      become: yes
      package:
        name: python3
        state: present
      when: python_installed.rc != 0
      tags: install_dependencies

    # Task 3: Install pip3 if not found
    - name: Check if pip3 is installed
      command: which pip3
      register: pip_installed
      failed_when: pip_installed.rc != 0
      changed_when: false
      ignore_errors: yes

    - name: Install pip3 if not found
      become: yes
      package:
        name: python3-pip
        state: present
      when: pip_installed.rc != 0
      tags: install_dependencies

    # Task 4: Ensure Ansible is installed
    - name: Check if Ansible is installed
      command: which ansible
      register: ansible_installed
      failed_when: ansible_installed.rc != 0
      changed_when: false
      ignore_errors: yes

    - name: Install Ansible if not found
      become: yes
      pip:
        name: ansible
        state: present
      when: ansible_installed.rc != 0
      tags: install_dependencies

    # Task 5: Ensure Kubernetes Python client is installed
    - name: Check if Kubernetes Python client is installed
      command: python3 -c "import kubernetes"
      register: kubernetes_client_installed
      failed_when: kubernetes_client_installed.rc != 0
      changed_when: false
      ignore_errors: yes

    - name: Install Kubernetes Python client if not found
      become: yes
      pip:
        name: kubernetes
        state: present
      when: kubernetes_client_installed.rc != 0
      tags: install_dependencies

    # Task 6: Ensure kubectl is installed (OS-specific)
    - name: Check if kubectl is installed
      command: which kubectl
      register: kubectl_installed
      failed_when: kubectl_installed.rc != 0
      changed_when: false
      ignore_errors: yes

    - name: Install kubectl based on OS
      become: yes
      package:
        name: "{{ kubectl_package }}"
        state: present
      when: kubectl_installed.rc != 0
      tags: install_dependencies

    # Task 7: Ensure minikube is installed (OS-specific)
    - name: Check if minikube is installed
      command: which minikube
      register: minikube_installed
      failed_when: minikube_installed.rc != 0
      changed_when: false
      ignore_errors: yes

    - name: Install minikube based on OS
      become: yes
      package:
        name: "{{ minikube_package }}"
        state: present
      when: minikube_installed.rc != 0
      tags: install_dependencies

    # Task 8: Set kubectl and minikube installation packages dynamically based on the OS
    - name: Set package manager variables based on OS
      set_fact:
        kubectl_package: "{{ 'kubectl' if ansible_facts['os_family'] == 'Debian' else 'kubectl-tools' }}"
        minikube_package: "{{ 'minikube' if ansible_facts['os_family'] == 'Debian' else 'minikube-cli' }}"

    # Task 9: Get the latest tag (Version) from the GitHub repository
    - name: Fetch latest version tag
      command: git describe --tags --abbrev=0
      register: latest_version
      changed_when: false  # No need to mark as changed

    - name: Set IMAGE_TAG from latest version
      set_fact:
        image_tag: "{{ latest_version.stdout }}"

    # Debugging: Print the image tag to ensure correctness
    - name: Debug image tag being used
      debug:
        msg: "Deploying with image tag: {{ image_tag }}"

    # Task 10: Apply the Kubernetes Nginx deployment with the new image tag
    - name: Apply Nginx Deployment
      kubernetes.core.k8s:
        state: present
        kubeconfig: "~/.kube/config"  # Ensure it's the correct kubeconfig path
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx-deployment
            namespace: default
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: nginx
            template:
              metadata:
                labels:
                  app: nginx
              spec:
                containers:
                  - name: nginx
                    image: "ghcr.io/peewpew/devops3/devops3:{{ image_tag }}"
                    imagePullPolicy: Always  # Forces Kubernetes to always pull the latest version
                    ports:
                      - containerPort: 80

    # Task 11: Apply the Kubernetes Nginx Service
    - name: Apply Nginx Service
      kubernetes.core.k8s:
        state: present
        kubeconfig: "~/.kube/config"  # Ensure it's the correct kubeconfig path
        definition: "{{ lookup('file', 'nginx-service.yml') }}"  # Ensure service definition is correct

    # Task 12: Verify the deployment
    - name: Get Kubernetes pods status
      command: kubectl get pods
      register: pod_status

    - name: Display pod status
      debug:
        var: pod_status.stdout
