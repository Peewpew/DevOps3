---
- name: Deploy to Kubernetes (Locally using minikube)
  hosts: localhost
  gather_facts: false  # We donâ€™t need to gather facts in this case
  tasks:

    # Task 1: Get the latest tag (Version) from the GitHub repository
    - name: Fetch latest version tag
      command: git describe --tags --abbrev=0
      register: latest_version
      changed_when: false  # No need to mark as changed

    - name: Set IMAGE_TAG from latest version
      set_fact:
        image_tag: "{{ latest_version.stdout }}"

    # Debugging: Print the image tag to ensure correctness
    - name: Debug image tag being used
      debug:
        msg: "Deploying with image tag: {{ image_tag }}"

# Task 2: Apply the Kubernetes Nginx deployment with the new image tag
- name: Apply Nginx Deployment
  kubernetes.core.k8s:
    state: present
    kubeconfig: "~/.kube/config"  # Ensure it's the correct kubeconfig path
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: nginx-deployment
        namespace: default
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: nginx
        template:
          metadata:
            labels:
              app: nginx
          spec:
            containers:
              - name: nginx
                image: "ghcr.io/peewpew/devops3/devops3:{{ image_tag }}"
                imagePullPolicy: Always  # Forces Kubernetes to always pull the latest version
                ports:
                  - containerPort: 80


    # Task 3: Apply the Kubernetes Nginx Service
    - name: Apply Nginx Service
      kubernetes.core.k8s:
        state: present
        kubeconfig: "~/.kube/config"  # Ensure it's the correct kubeconfig path
        definition: "{{ lookup('file', 'nginx-service.yml') }}"  # Ensure service definition is correct

    # Task 4: Verify the deployment
    - name: Get Kubernetes pods status
      command: kubectl get pods
      register: pod_status

    - name: Display pod status
      debug:
        var: pod_status.stdout
