name: Docker Image Build and Push

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger only on version tags

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Lint Dockerfile
      - name: Lint Dockerfile
        run: |
          curl -sL https://github.com/hadolint/hadolint/releases/download/v2.8.0/hadolint-Linux-x86_64 -o /usr/local/bin/hadolint
          chmod +x /usr/local/bin/hadolint
          hadolint Dockerfile

      # Set environment variables (REPO_NAME, IMAGE_NAME, IMAGE_TAG, KUBECONFIG)
      - name: Set Environment Variables
        run: |
          echo "REPO_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "IMAGE_NAME=devops3" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV
          
          # Set up KUBECONFIG environment variable using GitHub secret
          echo "KUBECONFIG=~/.kube/config" >> $GITHUB_ENV
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io

      # Build Docker image with dynamic naming
      - name: Build Docker Image
        run: |
          docker build --no-cache -t ghcr.io/$REPO_NAME/$IMAGE_NAME:$IMAGE_TAG . 
          docker images  # Verify the image
          
      # Scan Docker image for vulnerabilities
      #- name: Scan Docker Image for Vulnerabilities
      #  uses: aquasecurity/trivy-action@master
       # with:
         # image-ref: "ghcr.io/$REPO_NAME/$IMAGE_NAME:$IMAGE_TAG"
        #  format: "table"
       #   exit-code: 1  # Fail the pipeline if vulnerabilities are found
      #    ignore-unfixed: true  # Ignore vulnerabilities without fixes
          
      # Push Docker image to GHCR
      - name: Push Docker Image to GHCR
        run: |
          docker push ghcr.io/$REPO_NAME/$IMAGE_NAME:$IMAGE_TAG

      # Apply Kubernetes Deployment and Service using kubectl
      - name: Apply Kubernetes Deployment and Service
        run: |
          # Apply the Deployment YAML
          kubectl apply -f nginx-deployment.yml  
          
          # Apply the Service YAML
          kubectl apply -f nginx-service.yml 

      # Wait for the deployment to roll out and pods to be ready
      - name: Wait for Deployment
        run: |
          kubectl rollout status deployment/nginx-deployment --timeout=60s

      # Retrieve and test the deployed service
      - name: Test Nginx Deployment
        run: |
          # Fetch the correct external URL
          SERVICE_URL=$(kubectl get svc nginx-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [ -z "$SERVICE_URL" ]; then
            SERVICE_URL=$(kubectl get svc nginx-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          fi
          
          # Construct full HTTPS URL
          FULL_URL="https://$SERVICE_URL"
          echo "Testing deployed service at: $FULL_URL"

          # Wait a few seconds for service to be accessible
          sleep 10
          
          # Curl the service and validate response
          HTTP_STATUS=$(curl -ks -o /dev/null -w "%{http_code}" $FULL_URL)
          if [[ "$HTTP_STATUS" -ne 200 ]]; then
            echo "❌ Deployment failed! HTTP Status: $HTTP_STATUS"
            exit 1
          else
            echo "✅ Deployment successful! HTTP Status: $HTTP_STATUS"
          fi





      # Trigger Kubernetes deployment with the new image
      #- name: Deploy Docker Image to Kubernetes using Ansible Playbook
      #  run: |
      #    ansible-playbook deploy-playbook.yml
      #  env:
      #    GITHUB_REF: ${{ github.ref }}  # Pass the version tag to the Ansible playbook
      #    IMAGE_TAG: ${{ github.ref }}  # Pass the image tag to the playbook for Kubernetes update
      #    KUBECONFIG: ${{ secrets.KUBE_CONFIG }}  # Pass the KUBECONFIG as an environment variable
